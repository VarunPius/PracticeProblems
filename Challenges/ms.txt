Xortholians are a proud race and have a rich history of rainbow-inspired art. One Xortholian artist from the last century made a particularly beautiful series of paintings using only the colors in the rainbow.

Each of these paintings consists of two rows of paint.

The first row is a series of equally sized squares, each of them being a primary color or blank, i.e. each is one of the following: "red", "yellow", "blue", "blank". No two neighboring spaces in the first row will ever have the same color (including blank).

For example, a first row could be:

red blank blue yellow
The second row is a series of colors whose length is one more than its corresponding first row. Each color, in order, is a combination of the two colors above it. Red and blue, for example, make purple, while red and blank would make more red.

A second row generated from the above colors would be:

red red blue green yellow
Visually, the two would look like:

 r   b y
r r b g y
To be clear, possible colors are "red", "orange", "yellow", "green", "blue", and "purple". Xortholians do not recognize indigo or violet.

Your goal as an aspiring young Xortholian Art and Mathematics dual-major is to determine what some paintings' first row is based on the corresponding second row.

Input definition

Input files will consist of a single line having 75 to 100 color names separated by spaces, representing the second row of a painting. Input color names may be "red", "orange" "yellow", "green", "blue", "purple"or "blank".

No two input colors (including "blank") will ever repeat twice in a row.

Output definition

Your output should be a single line consisting of 74 to 99 color names, separated by spaces. Color names may be "red", "yellow", "blue", or "blank".

Example input

red purple green orange purple purple orange yellow yellow yellow
Example output

red blue yellow red blue red yellow blank yellow

------------------------------------

Given a set of lines each containing multiple random strings, your task for each line is to find the characters that are common to all of its strings. In other words, you should output one string for each line that contains all of the distinct characters that the given strings on that line have in common.

Characters include [A-Z, a-z, 0-9]. Characters with different cases (e.g. 'a' vs 'A') count as distinct characters.

The order of characters in the output string should appear as follows:

In order of numbers 0-9.
In order of uppercase characters A-Z.
In order of lowercase characters a-z.
Input definition

Input files for this problem will contain an arbitrary number of lines.

The first line will contain an integer, m, denoting the number of tests in the input file.

Each subsequent line will contain multiple space-separated strings.

Output definition

Your output should contain m lines, one corresponding to each test case given in the input.

Each line should have one string (which can be empty/a blank line) containing all of the distinct characters that the input strings have in common, listed in the order described above.

Example input

2
9x34209asAb32sD840D9258 02934x2DoebAaab90CDEe348290
aabcwdefghkij ksdfopweiraa wieourslakaaier asjoirwekjaa
Example output

023489ADabx
aeikw


i/p:
03489BDEIKSTVWcfhjklnstv
0123567BCDEFHIJKLMNOPQRSTUVWYZbdefghijklmnpqrstuvwxy
ABDHKNQRYjlowz
IUXYZabfgklpxy
034569ABDEFHIMNPQRSTUVWXYbcfhjlnoprtuvwxyz

012345689BCDEFGHIJLMNOQSTUVWXYZabcdefghjklmnopqrstuwxyz

1358ACDFJKNPQRSTUYZabcegikoprtvwxz
01234578ACDEFKLMOPTVWXYZbefghijmopqrstuvyz

---------------------------------

Given a set of arrays of scrambled integers, your goal is to find which numbers were lost from each of the sequences.

Numbers are only lost from the middle of a (properly ordered) sequence: the first integer in the sequence l and last integer r are never lost.

For this problem, a properly ordered sequence of numbers is to be in strictly increasing order: [l, l + 1, l + 2, ... , r - 2, r - 1, r].

Your task, for each of the given arrays, is to print a string containing all of the missing numbers from the sequence in increasing order.

Input definition

An input file for this problem will contain an arbitrary number of lines. The first line will contain an integer, m, the number of tests in the input file. The next m lines will each contain multiple space-separated integers. For each line, generate a string containing the missing integers from the input sequence in increasing order.

Output definition

Your output file should contain m lines.

Each line should contain a string containing the missing integers from the corresponding input sequence, separated by spaces and in increasing order. If the sequence is complete, i.e. no numbers are missing, your output line for that input should be an empty string/blank line.

Example input

11
28 50 45 35 42 32 48 55 30 51 31 41 53 37 36 29 38 46 44 43 47 34 33 49 40 39 56
20 37 21 46 23 27 25 29 51 26 24 43 41 39 35 47 48 49 44 36 31 40 22 34 30 32 42 38 28 45 52
26 44 65 41 34 69 68 46 54 53 70 28 35 49 56 37 52 55 71 29 40 67 64 60 57 30 59 39 38 32 72
19 35 31 40 68 66 27 60 29 45 59 72 71 70 26 38 47 21 52 46 56 57 48 73 74 76 51 39 55 63 28 69 64 77
21 27 48 38 52 30 60 42 47 63 36 64 32 31 39 55 66 61 67 53 25 59 58 22 35 33 41 62 23 40 51 49 46 28 56 54 43 29 37 44 68 34 45 65 69
22 41 33 38 42 48 39 32 23 47 45 40 24 27 37 31 26 43 51
14 34 40 52 36 27 65 56 39 46 29 57 35 60 15 20 24 66 38 21 48 32 64 31 26 18 28 55 59 49 53 19 41 23 22 37 42 61 50 44 45 17 47 16 33 30 63 43 54 67
12 19 42 29 31 51 35 41 50 39 57 54 53 44 21 46 13 14 38 20 58 15 45 24 16 36 32 26 49 27 52 17 33 40 60
10 32 13 56 40 39 57 34 35 43 61 23 25 62 30 22 51 20 63 55 58 44 54 16 66 11 60 19 42 46 52 59 29 36 18 47 41 33 26 31 14 15 49 28 65 53 12 50 48 38 45 64 27 37 67
15 50 26 24 25 20 59 29 33 40 30 66 31 36 41 55 46 60 48 64 51 39 43 67 56 70 17 58 44 37 35 34 68 16 61 19 49 47 63 18 32 23 27 21 45 52 53 38 65 57 54 69 62 28 22 71
10 34 28 30 40 52 49 15 25 32 57 19 27 44 17 22 56 31 54 13 29 48 42 21 11 47 37 51 33 63
Example output

52 54
33 50
27 31 33 36 42 43 45 47 48 50 51 58 61 62 63 66
20 22 23 24 25 30 32 33 34 36 37 41 42 43 44 49 50 53 54 58 61 62 65 67 75
24 26 50 57
25 28 29 30 34 35 36 44 46 49 50
25 51 58 62
18 22 23 25 28 30 34 37 43 47 48 55 56 59
17 21 24
42
12 14 16 18 20 23 24 26 35 36 38 39 41 43 45 46 50 53 55 58 59 60 61 62



i/p:
4 5
3 8 9 13 14 17 18 22 23 28 31 32 35 37 38 39 41
3 5 10 11 12 16 17 18 19 20 22 25 34 35 36 42 44 45 47 51 52 53

7 9 10 13
8 12 13 14 21 23 24 25 27 28 35 36 37 39 43 47
3 9 11 15 17 18 20 21 27 36 37 40 42 46 48 53 68
3 6 7 8 12 13 17 18 21 30 37 39 41 49 51 54 59
12 36
3 16 17 20 24 25 30 32 33 41 43 47 52 65 67
2 4
2 8 13 15 16 17 24 28 31

-------------------------------------


shuttle:
Microsoft's campus in Redmond is rather large, consisting of dozens of buildings and roads connecting them. Because some buildings are over a mile apart, Microsoft offers a shuttle service between buildings to its employees. Since there are thousands of employees on campus, there is a possibility that a shuttle will pick up more than one rider and take an alternate path to drop off someone else before dropping off the first rider. This results in varying shuttle trip times, and thus, if one is really unlucky, the shuttle could take longer than walking.

For this problem, we will consider an employee who would like to compare walking time to shuttle time and assume that the shuttle service provides an accurate estimated arrival time at the destination. Since employees can walk through buildings, using a maps application will not give the most accurate time estimate for walking. This is where your task comes in.

Given street intersections, building numbers, the distances between them, and how long the shuttle would take, tell the employee whether to shuttle or walk. The employee will only walk if it takes less time than the estimated shuttle length. When given the connection between intersections and/or buildings, you can assume they are always bi-directional.

Input definition

The first line of input will contain one integer, T <= 50, which represents the number of paths that need to be calculated.

T test cases will follow in the following format:

The first line of a test case will contain the start building, followed by a space and the destination building. The next line will contain the number of street and building pairs, n <= 50. The next n lines will contain a building/street pairing and the amount of time it takes to walk that path; it is noted that some lines contain the time it takes using a building to building path and some lines contain the time it takes between intersections and a building. After the n pairings, the next line will contain the amount of time it takes the shuttle to drive there.

Buildings will always be an integer. Road names will be a string containing letters, numbers, or both.

Output definition

Your output should contain t lines, one for each test case, in the following format:

Case #i: s d

Where i is the 1-based test case number, s is the shortest time to get from the starting building to the destination building (either by foot or shuttle), and d is "Walk" or "Shuttle", depending on the shortest option. In case of ties, always choose the shuttle.

Example input

2
27 50
5
27 24th&156th 5
40th&156th 50 3
24th&156th 40th&156th 10
50 40th&148th 5
40th&148th 24th&148th 10
15
16 StudioA
4
16 148th&40th 7
148th&40th 25 3
25 148th&36th 4
148th&36th StudioA 5
20
Example output

Case #1: 15 Shuttle
Case #2: 19 Walk
 

 i/p:
Case #1: 5 Shuttle
Case #2: 2 Walk
Case #3: 5 Shuttle
Case #4: 10 Shuttle
Case #5: 1 Walk
Case #6: 5 Shuttle
Case #7: 5 Shuttle
Case #8: 3 Walk
Case #9: 5 Shuttle
Case #10: 5 Shuttle
Case #11: 5 Shuttle
Case #12: 5 Shuttle
Case #13: 5 Shuttle
Case #14: 5 Shuttle
Case #15: 5 Shuttle
Case #16: 5 Shuttle
Case #17: 5 Shuttle
Case #18: 4 Walk
Case #19: 5 Shuttle
Case #20: 0 Walk
Case #21: 5 Shuttle
Case #22: 0 Walk
Case #23: 19 Shuttle
Case #24: 5 Shuttle
Case #25: 5 Shuttle
Case #26: 5 Shuttle
Case #27: 11 Shuttle
Case #28: 5 Shuttle
Case #29: 5 Shuttle
Case #30: 5 Shuttle
Case #31: 10 Shuttle
Case #32: 6 Shuttle
Case #33: 5 Shuttle
Case #34: 7 Shuttle
Case #35: 5 Shuttle
Case #36: 9 Shuttle
Case #37: 7 Shuttle
Case #38: 5 Shuttle
Case #39: 5 Shuttle
Case #40: 10 Shuttle
Case #41: 5 Shuttle
Case #42: 11 Shuttle
Case #43: 5 Shuttle
Case #44: 5 Shuttle
Case #45: 7 Shuttle
Case #46: 5 Shuttle
Case #47: 5 Shuttle
Case #48: 5 Shuttle
Case #49: 5 Shuttle
Case #50: 6 Shuttle
---------------------------------

This problem is inspired by the movie Primer. Two people have accidentally just invented a time travel device. The startup they have been trying to launch together hasn't quite taken off yet, so they decide that a quick way to raise capital would be to use the time travel device to make sure bets in the stock market.

Their plan is simple. Over the course of a day, they will monitor a number of stocks in the stock market and record their movements every hour. At the end of the day, they will use the time machine to travel back to the beginning of the day. Equipped with certain knowledge of the future, they will be able to trade in the stock market optimally - and hopefully make lots of money!

In order to avoid suspicion, the two agree to hold only one share of stock at a time, and they agree to invest in only one stock throughout the day, since it's more believable that they got lucky on one stock than on many. Because they start with a finite amount of cash, they cannot buy a stock until its share price is less than or equal to the amount they have (including any profits they've made so far). Finally, if they enter the last hour of the day holding a share of stock, they decide it would be best to sell it to avoid any losses in after-hours trading.

Your task is to determine what one stock they should trade and on what hours of the day to buy, hold, and sell it. The goal is to maximize total profit throughout the day, subject to the above constraints.

Input definition

The input will contain an arbitrary number of lines. The first line will show the initial amount of money held at the beginning of the day, written in currency format with no dollar sign (for example, 19.50). The second line will be a list of hours of the trading day, in 24-hour format.

Each of the remaining lines will be separated into a number of columns. The first column will be the ticker symbol of a stock. After that, for each hour of the day there will be a column containing the price of that stock at the corresponding hour, also in currency format with no dollar sign.

Output definition

Your output should contain exactly four lines:

The ticker symbol of the stock you will choose in all caps
The amount of cash you end the day with in currency format with no dollar sign
A list of the hours of the trading day in 24-hour format (you might not be able to simply reprint the list that was in the input)
Under each hour of the day, print the following:
"B" if you should buy the stock on that hour
"S" if you should sell the stock on that hour
"." if you are holding the stock during that hour
Nothing (whitespace) if none of the above apply
The alignment of your output is important; in particular, non-trailing whitespace must match the expected solutions to receive credit. Your ouput's third line should contain four spaces after each one-digit hour and three spaces after each two-digit hour. The fourth line's text should be aligned with the hours. You are strongly encouraged to use the practice inputs to ensure your output alignment is correct.

Example input

100.00
     8      9      10     11     12     13     14     15     16     
ABCD 400.00 412.10 410.33 399.98 401.10 408.07 409.79 410.22 408.80 
ABDC 90.10  90.00  89.79  90.02  91.55  91.96  93.04  93.09  92.99  
BCAD 42.22  43.20  45.10  39.99  39.20  48.21  50.03  47.45  46.38  
Example output

BCAD
113.71
8    9    10   11   12   13   14   15   16   
B    .    S         B    .    S              

o/p:
BDCA
381.58
8    9    10   11   12   13   14   15   16   
B    S              B    .    .    S    
------------------------------------

"Agent Jimmy Bonds? You are a master of obfuscation and the best person for this job. We have a secret message to convey to our friends on the other side of the galaxy, but can't risk anyone else knowing about it. We need your help implementing a Vigenere cipher."

A Vigenere cipher takes plaintext and encrypts it into ciphertext by cyclically applying a cipher key. The encryption adds letter values modulo 26, where A=0, B=1, C=2, .... GOODBYE (6, 14, 14, 3, 1, 24, 4) encrypted with HELLO (7, 4, 11, 11, 14) will give NSZOPFI as the ciphertext (14, 18, 25, 14, 15, 5, 8):

  GOODBYE
+ HELLOHE
  -------
  NSZOPFI
Input definition

An input file for this problem will contain an arbitrary number of lines.

Each line will contain a 64-char plaintext message, a vertical pipe ('|') separator, and a 10-char Vigenere cipher key.

The plaintext message could contain any character between [a-z], any character between [A-Z], and any character in this set: "!@#$%^&*()_-+=[{]};:<>./? ".

The Vigenere cipher key will only contain characters between [A-Z].

As we are a highly secretive agency, the plaintext message might not look very plain -- do not worry, we have just pre-obfuscated it.

Output definition

An output file for this problem should contain the same number of lines as the corresponding input.

Each line should be a 64-char encrypted ciphertext that is the result of applying the 10-char Vigenere cipher key to the 64-char plaintext. Only the characters [a-z] and [A-Z] should be encrypted and the original letter casing of the input should be preserved in the output. Characters not within this range should be transmitted without further obfuscation.

Example input

This -- is a secret message! Shhh. Never tell anyone what I did.|SECRETKEYS
Example output

Llkj -- ml k wcujiv dilceew! Kljy. Rxfip lwpn rrryrc ozev Z hbn.

o/p:
PV]xRuG?c@_AbxHQ=;Vwg)l-agN MSJ^ar=:/M*YRo><OB-lFIPaAspsfrV;]zHi
-----------------------

Have you ever looked up a word for its synonyms, then looked up synonyms for the synonyms? Let's define this as a synonym tree. The root node of the tree is the original word and is considered to be level 0. All synonyms of the root are its children and considered to be level 1. All synonyms of level 1 nodes not already in the tree are considered to be level 2 and so on.

For example, given the following synonym list:

one: single, unique
single: alone, unique
unique: single, distinct

If the root node is one, the level description would be the following:

one 0
single 1
unique 1
alone 2
distinct 2

We can further condense this by indicating the number of words at each level. In this case: 1 2 2.

It is noted that had unique not been a synonym for single, the level description would have remained the same. Further, if word1 is a synonym of word2, word2 does not need to be a synonym of word1.

Given the condensed level description for a set of words, determine the number of synonym lists that could have generated it.

Due to the size of the numbers involved in the computation and to avoid complex data structures not available in all languages, you should do all of your computations mod 1,000,000,007.

Input definition

The first line of input will be a single integer N, the number of levels in the condensed level description. The next line will contain N space-separated integers always starting with a 1. This will be the condensed level description. There will be at most 10000 levels and at most 1,000,000,000 words per level.

Output definition

Your output should contain a single integer C, the number of synonym lists that could have generated the condensed level description under mod 1,000,000,007.

Example input

2
1 2
Example output

16

o/p:
858703499
----------------
Your friends are playing a game called "Word Sequence". In this game you are given a dictionary of words D and two words A and B (both words are in the dictionary), and you have to find the minimum number of changes needed to turn A into B.

A change is defined as replacing only one character from the current string with another, such that the new string is also in D.

Let's first consider D = [abc, abb, acc, ccc, bbb] and:

* abc -> abb (this is a valid single change).
* abc -> bbc -> bbb (this is NOT valid because bbc is NOT in `D`). 
* abc -> ccc (this is NOT a valid change because there are two replacements in one change).
Your task is to write a program that can find the minimum number of changes required for a given set of (A,B) pairs.

Input definition

The first line of the input gives the number of the words in the dictionary L (2 <= L <= 100)and the number of queries to solve Q (1 <= Q <= 10). The next L lines each contain a single word in the dictionary. The dictionary can contain words of varying length. The final Q lines of input each contain an A and B pair to evaluate.

It is guaranteed that all of the given words in the input only contain lower case characters and that the maximum length of any word is 10 characters.

Output definition

For each query in the input, your output should contain a single line that has the minimum number of changes required to turn string A into B. If there is no possible solution print "-1" instead (without the quotes).

To add clarity, let's now consider the specific input file given on this page.

For the first query, the number of changes is 2 as you can transform 'abc' to 'acc' and then to 'ccc'.
For the second query, you can transform acc to ccc in 1 change.
For the third query, there is no way to transform abc to bbb; therefore, the output is -1.
Example input

5 3
abc
bbb
aab
acc
ccc
abc ccc
acc ccc
abc bbb
Example output

2
1
-1

o/p:
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
9
-1
-1
-1
-1
-1
