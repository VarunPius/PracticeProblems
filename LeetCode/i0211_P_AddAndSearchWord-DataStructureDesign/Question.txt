 Author:     Varun Pius Rodrigues
 Date:       August , 2020
 Problem:    Add and Search Word - Data structure design
 Difficulty: Medium
 Source:     https://leetcode.com/problems/add-and-search-word-data-structure-design/

/********************************************************************************** 
* 
*  Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)

search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true

Note:
You may assume that all words are consist of lowercase letters a-z.

*               
**********************************************************************************/

class TrieNode:
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.is_end = False
        
        
class WordDictionary:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        current = self.root
        for letter in word:
            current = current.children[letter]
        current.is_end = True
    
    def dfs(self, word, node):
        if len(word) == 0:
            return node.is_end
        if word[0] != ".":
            node = node.children.get(word[0])
            if node is None:
                return False
            return self.dfs(word[1:], node)
        
        if word[0] == ".":
            # if len(node.children) == 0:
            #     return False
            # return any(self.dfs(word[1:], node) for node in node.children.values())
            for node in node.children.values():
                # print(node)
                if self.dfs(word[1:], node):
                    return True
            return False

            
    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        return self.dfs(word, self.root)

defaultdict:
somedict = {}
print(somedict[3]) # KeyError

someddict = defaultdict(int)
print(someddict[3]) # print int(), thus 0