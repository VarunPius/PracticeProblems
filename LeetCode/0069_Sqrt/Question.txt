 Author:     Varun Pius Rodrigues
 Date:       Dec 15, 2016
 Problem:    Sqrt(x)
 Difficulty: Easy
 Source:     https://leetcode.com/problems/sqrtx/

/********************************************************************************** 
* 
* Implement int sqrt(int x).
* 
* Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
*
* Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.
*
* Example 1:
*
* Input: 4
* Output: 2
* Example 2:
*
* Input: 8
* Output: 2
* Explanation: The square root of 8 is 2.82842..., and since
*              the decimal part is truncated, 2 is returned.
*               
**********************************************************************************/


/*
Using bit manipulation:
Since sqrt(x) is composed of binary bits, I calculate sqrt(x) by deciding every bit from the most significant to least significant.
Since an integer n can have O(log n) bits with each bit decided within constant time, this algorithm has time limit O(log n), actually, because an Integer can have at most 32 bits, I can also say this algorithm takes O(32)=O(1) time.

 public int sqrt(int x) {
    if(x==0)
        return 0;
    int h=0;
    while((long)(1<<h)*(long)(1<<h)<=x) // firstly, find the most significant bit
        h++;
    h--;
    int b=h-1;
    int res=(1<<h);
    while(b>=0){  // find the remaining bits
        if((long)(res | (1<<b))*(long)(res |(1<<b))<=x)
            res|=(1<<b);
        b--;
    }
    return res;
}
*/